name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

# Cancel any active builds when new commits are pushed
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  bump_and_tag:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    environment: Production
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_USER: tester
          POSTGRES_PASSWORD: pgtestpw
          POSTGRES_DB: l0_storage
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'zulu'

      - name: Install CLI
        uses: dopplerhq/cli-action@v2

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Create Tables
        run: psql -h localhost -d l0_storage -U tester -f database/create_tables.sql
        env:
          PGPASSWORD: pgtestpw

      - name: Maven Package
        run: doppler run -c tst -- mvn clean package
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_ST }}

      - name: Bump Version
        id: bump-version
        uses: RichardInnocent/semantic-versioning-maven@v0.0.36
        with:
          access-token: ${{ secrets.github_token }}
          version-prefix:

      - name: Set Worker Version
        id: package_version
        uses: KageKirin/set-node-package-version@v1
        with:
          file: 'worker/upload/package.json'
          version: ${{ steps.bump-version.outputs.new-version }}
    outputs:
      version: ${{ steps.bump-version.outputs.new-version }}
  test_and_push:
    runs-on: ubuntu-latest
    needs: bump_and_tag
    environment: Production
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_USER: tester
          POSTGRES_PASSWORD: pgtestpw
          POSTGRES_DB: l0_storage
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'zulu'

      - name: Install CLI
        uses: dopplerhq/cli-action@v2

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Create Tables
        run: psql -h localhost -d l0_storage -U tester -f database/create_tables.sql
        env:
          PGPASSWORD: pgtestpw

      - name: Maven Package
        run: doppler run -c tst -- mvn clean package
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_ST }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_PAT }}

      - name: Registry login
        run: doctl registry login --expiry-seconds 600

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: prod.dockerfile
          push: true
          tags: |
            registry.digitalocean.com/tiki/l0-storage:${{ needs.bump_and_tag.outputs.version }}
            registry.digitalocean.com/tiki/l0-storage:latest
          build-args: |
            JAR_FILE=target/*.jar
  deploy_to_infra:
    runs-on: ubuntu-latest
    needs: [ bump_and_tag, test_and_push ]
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform Variables
        working-directory: ./infra
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          sem_ver = "${{ needs.bump_and_tag.outputs.version }}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        working-directory: infra

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infra

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: infra
  deploy_worker:
    runs-on: ubuntu-latest
    needs: deploy_to_infra
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Wrangler
        uses: cloudflare/wrangler-action@2.0.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: 'worker/upload'
          secrets: |
            REMOTE_ID
            REMOTE_SECRET
            WASABI_ID
            WASABI_SECRET
        env:
          REMOTE_ID: ${{ secrets.WORKER_ENV_REMOTE_ID }}
          REMOTE_SECRET: ${{ secrets.WORKER_ENV_REMOTE_SECRET }}
          WASABI_ID: ${{ secrets.WORKER_ENV_WASABI_ID }}
          WASABI_SECRET: ${{ secrets.WORKER_ENV_WASABI_SECRET }}
  sentry_release:
    runs-on: ubuntu-latest
    needs: deploy_to_infra
    environment: Production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: 'my-tiki'
          SENTRY_PROJECT: 'l0-storage'
        with:
          environment: public
          ignore_missing: true
          ignore_empty: true
  publish_docs:
    runs-on: ubuntu-latest
    needs: [ sentry_release, bump_and_tag ]
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: OpenApi
        uses: readmeio/rdme@8.4.0
        with:
          rdme: openapi docs/openapi.yaml --key=${{ secrets.README_API_KEY }} --id=6379efc05c98fc002512b213

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump_and_tag.outputs.version }}
